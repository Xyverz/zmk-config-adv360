
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
        &kp ESC            &kp N1     &kp N2    &kp N3     &kp N4    &kp N5              &mo 2      &mo 2    &kp N6     &kp N7     &kp N8    &kp N9     &kp N0   &kp BSLH
        &kp TAB  &kp SINGLE_QUOTE  &kp COMMA   &kp DOT      &kp P     &kp Y              &none      &none     &kp F      &kp G      &kp C     &kp R      &kp L  &kp SLASH
      &kp GRAVE             &kp A      &kp O     &kp E      &kp U     &kp I              &none  &kp LCTRL  &kp LALT                        &kp RALT  &kp RCTRL      &none     &kp D            &kp H   &kp T   &kp N   &kp S  &kp MINUS
      &kp LSHFT          &kp SEMI      &kp Q     &kp J      &kp K     &kp X              &none      &none  &kp LGUI      &none      &none  &kp RGUI      &none      &none     &kp B            &kp M   &kp W   &kp V   &kp Z  &kp RSHFT
 &kp LEFT_SHIFT          &kp LGUI  &kp EQUAL  &kp LEFT  &kp RIGHT  &kp BSPC            &kp DEL      &mo 1     &mo 1  &kp ENTER  &kp SPACE    &kp UP   &kp DOWN   &kp LBKT  &kp RBKT  &kp RIGHT_SHIFT
            >;
        };

        layer_fn {
            bindings = <
  &kp F11  &kp F1      &kp F2        &kp F3        &kp F4         &kp F5                 &trans       &trans  &kp F6  &kp F7     &kp F8     &kp F9    &kp F10  &kp F12
   &trans  &trans      &trans        &trans        &trans         &trans            &bootloader  &bootloader  &trans  &trans     &trans     &trans     &trans   &trans
 &kp CAPS  &trans  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP         &trans                  &none       &trans  &trans                        &trans     &trans    &none  &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &kp C_PREV      &kp C_PP    &kp C_NEXT         &trans                  &none        &none  &trans   &none      &none     &trans      &none    &none  &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &trans      &trans      &kp HOME       &kp END  &kp LG(LC(Q))                 &trans       &trans  &trans  &trans  &kp LG(L)  &kp PG_UP  &kp PG_DN   &trans  &trans  &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

    };
};
